5.1
xp = 2xp
xp = 2xp - 2xp
xp = 0 - 0 
xp = 0

5.2
Version 1: 60 + 35n			60 + 35(2) = 60 + 70 = 130		60 + 35(3) = 60 + 105 = 165		n <= 2
Version 2: 136 + 4n			136 + 4(2) = 136 + 8 = 144		136 + 4(3) = 136 + 12 = 148		8 > n > 2
							136 + 4(8) = 168
Version 3: 157 + 1.25n		157 + 1.25(8) = 167												n >= 8

60 + 35n = 136 + 4n
31n = 76
n = ~2+

136 + 4n = 157 + 1.25n
2.75n = 21
11n = 84
n = ~7+

5.3
Code	Min		Max		incr	square
A.		1		91		90		90
B.		91		1		90		90
C.		1		1		90		90

i = 10; i < 100; i++
i = 99; i >= 10; i--
i = 10; i < 100; i++


5.5
A. 2n multiplications and n additions. 
B. 	Floating point multiplication has a latency bound of 5.00, and capacity of 2. 
	Floating point addition has a latency bound of 3.00. 
	Thus floating point multiplication forms the critical path. 

5.6
A. n multiplications and additions. 
B.	Floating point muliplication has a latency bound of 5.00 and capacity of 2. 
	Floating point addition has a latency bound of 3.00. 
	addition is dependent on multiplicaiton so total of 8.00. 
C.	Only a single multiplication occurs on the critical path due to capacity. 


5.9
while (i1 < n && i2 < n) {
	long v1 = src1[i1]
	long v2 = src2[i2]
	lont take1 = v1 < v2;
	dest[id++] = take1 ? v1 : v2
	i1 += take1;
	i2 += (1-take1);

}